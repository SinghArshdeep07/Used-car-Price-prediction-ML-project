# -*- coding: utf-8 -*-
"""Car Price Prediction ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v90AzuTmVodHHaYPOui4fMx47E4Pgou1

Importing the dependancies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing

"""

#loading the file from csv file to panda dataframe
car_dataset = pd.read_csv('/content/car data.csv')

#inspecting the first 5 rows of the data frame
car_dataset.head()

#checking the number of rows and columns
car_dataset.shape

#getting some info about the dataset
car_dataset.info()

#checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorical Data"""

#encoding "fuel type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

#encoding "Seller Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

#encoding "Transmission_Type" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting Data and Target"""

X=car_dataset.drop(['Car_Name','Selling_Price'],axis =1)
 Y=car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training and Test data"""

X_train, X_test, Y_train, Y_test =  train_test_split(X, Y , test_size = 0.1, random_state = 2)

"""Model Training

1. Linear Regression
"""

#loading linear regression model
lin_reg_mod = LinearRegression()

lin_reg_mod.fit(X_train, Y_train)

"""Model Evaluation
 
"""

#prediction on Training data
training_data_pred = lin_reg_mod.predict(X_train)

#R square error
error_score = metrics.r2_score(Y_train, training_data_pred)
print("R squared error : ",error_score )

"""Visualize the actual prices and predicted prices"""

plt.scatter(Y_train, training_data_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price")
plt.show()

#prediction on T est data
test_data_pred = lin_reg_mod.predict(X_test)

#R square error
error_score = metrics.r2_score(Y_test, test_data_pred)
print("R squared error : ",error_score )

plt.scatter(Y_test, test_data_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price")
plt.show()

"""Lasso Regression"""



#loading lasso regression model
las_reg_mod = Lasso()

las_reg_mod.fit(X_train, Y_train)

"""Model Evaluation
 
"""

#prediction on Training data
training_data_pred = las_reg_mod.predict(X_train)

#R square error
error_score = metrics.r2_score(Y_train, training_data_pred)
print("R squared error : ",error_score )

"""Visualize the actual prices and predicted prices"""

plt.scatter(Y_train, training_data_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price")
plt.show()

#prediction on Test data
test_data_pred = las_reg_mod.predict(X_test)

#R square error
error_score = metrics.r2_score(Y_test, test_data_pred)
print("R squared error : ",error_score )

plt.scatter(Y_test, test_data_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price")
plt.show()